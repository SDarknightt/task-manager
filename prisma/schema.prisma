// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  boards        UserBoard[]
  tasks         Task[]
  disabled      Boolean   @default(false)
}

//table to save the relation between users and boards
model UserBoard {
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id])
  boardId String @map("board_id")
  board Board @relation(fields: [boardId], references: [id])
  admin Boolean @default(false)

  @@id([userId, boardId])
}

model Board {
  id String @id @default(cuid())
  title String
  description String?
  creationDate DateTime @default(now()) @map("creation_date") @db.Timestamp(6)
  disabled Boolean @default(false)
  users UserBoard[]
  tasks Task[]
}

model Task {
  id String @id @default(cuid())
  boardId String @map("board_id")
  title String
  description String?
  creationDate DateTime @default(now()) @map("creation_date") @db.Timestamp(6)
  estimatedDate DateTime? @map("estimated_date") @db.Timestamp(6)
  endDate DateTime?  @map("end_date") @db.Timestamp(6)
  responsibleId String? @map("responsible_id")
  disabled Boolean @default(false)
  responsible User? @relation(fields: [responsibleId], references: [id])
  board Board @relation(fields: [boardId], references: [id])
}